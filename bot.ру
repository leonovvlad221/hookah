import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from aiogram.utils.executor import start_webhook

load_dotenv()

TOKEN = os.getenv('TOKEN')
WEBHOOK_HOST = os.getenv('WEBHOOK_URL')  # https://hookah-h9he.onrender.com
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

PORT = int(os.getenv('PORT', 8000))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# Столы
TABLES = list(range(1, 46))  # 1–45

# Постоянные клиенты
VIP_CLIENTS = [
    "Эдгар Хачатарян", "Эрнест Хачатарян", "Саша Лысенко", "Эмин Бабаев", "Шахин Бабаев",
    "Тахир", "Артур Арутюнян", "Тарен Егонян", "Игорь Бегучев", "Артур Маркосян",
    "Аргишт", "Игорь Буштаков", "Саша Бондаренко", "Славик Гречуха", "Артем Зинченко",
    "Валик Понамарев", "Жека Абросимов", "Артем Булгурский", "Виталик Герасимов",
    "Сергей Кесян", "Георгий Кондрашев", "Максим Отрахов", "Сергей Бондаренко",
    "Оганезов Рем", "Рамиль", "Юра", "Ден Чай", "Рома Явников", "Захар",
    "Габилова Алина", "Андрей Бей"
]

# Состояния
class Booking(StatesGroup):
    waiting_for_table = State()
    waiting_for_hookah = State()

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer("Привет! Какой номер стола?")
    await Booking.waiting_for_table.set()

@dp.message_handler(state=Booking.waiting_for_table)
async def process_table(message: types.Message, state: FSMContext):
    try:
        table_number = int(message.text)
        if table_number not in TABLES:
            raise ValueError
        await state.update_data(table_number=table_number)
        await message.answer(f"Сколько кальянов хотите заказать для стола №{table_number}?")
        await Booking.waiting_for_hookah.set()
    except ValueError:
        await message.answer("Введите правильный номер стола от 1 до 45.")

@dp.message_handler(state=Booking.waiting_for_hookah)
async def process_hookah(message: types.Message, state: FSMContext):
    try:
        hookah_count = int(message.text)
        if hookah_count <= 0:
            raise ValueError
        data = await state.get_data()
        table_number = data['table_number']
        await message.answer(f"Ваш заказ принят: {hookah_count} кальян(ов) на стол №{table_number}.\nСпасибо!")
        await state.finish()
    except ValueError:
        await message.answer("Введите корректное количество кальянов.")

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dp):
    logging.warning('Shutting down..')
    await bot.delete_webhook()
    logging.warning('Bye!')

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host='0.0.0.0',
        port=PORT,
    )
