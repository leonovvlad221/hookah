import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Order(StatesGroup):
    waiting_for_table = State()
    waiting_for_hookah_count = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–π —É –≤–∞—Å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞? (1-45)")
    await Order.waiting_for_table.set()

@dp.message_handler(state=Order.waiting_for_table)
async def process_table(message: types.Message, state: FSMContext):
    try:
        table_number = int(message.text)
        if table_number < 1 or table_number > 45:
            raise ValueError
        await state.update_data(table_number=table_number)
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, —Å—Ç–æ–ª {table_number}. –°–∫–æ–ª—å–∫–æ –∫–∞–ª—å—è–Ω–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ?")
        await Order.waiting_for_hookah_count.set()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞ (–æ—Ç 1 –¥–æ 45).")

@dp.message_handler(state=Order.waiting_for_hookah_count)
async def process_hookah_count(message: types.Message, state: FSMContext):
    try:
        hookah_count = int(message.text)
        if hookah_count < 1:
            raise ValueError
        data = await state.get_data()
        table_number = data['table_number']
        await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑:\n–°—Ç–æ–ª ‚Ññ{table_number}\n–ö–∞–ª—å—è–Ω–æ–≤: {hookah_count}\n\n–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ –∫–∞–ª—å—è–Ω—ã üçπ")
        await state.finish()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
