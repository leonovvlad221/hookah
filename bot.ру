import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv('TOKEN')

# –í–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π ID!)
ADMIN_ID = 123456789  # <-- –¢—É—Ç –≤—Å—Ç–∞–≤ —Å–≤—ñ–π Telegram ID

# –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
regular_customers = [
    "–≠–¥–≥–∞—Ä –•–∞—á–∞—Ç–∞—Ä—è–Ω",
    "–≠—Ä–Ω–µ—Å—Ç –•–∞—á–∞—Ç–∞—Ä—è–Ω",
    "–°–∞—à–∞ –õ—ã—Å–µ–Ω–∫–æ",
    "–≠–º–∏–Ω –ë–∞–±–∞–µ–≤",
    "–®–∞—Ö–∏–Ω –ë–∞–±–∞–µ–≤",
    "–¢–∞—Ö–∏—Ä",
    "–ê—Ä—Ç—É—Ä –ê—Ä—É—Ç—é–Ω—è–Ω",
    "–¢–∞—Ä–µ–Ω –ï–≥–æ–Ω—è–Ω",
    "–ò–≥–æ—Ä—å –ë–µ–≥—É—á–µ–≤",
    "–ê—Ä—Ç—É—Ä –ú–∞—Ä–∫–æ—Å—è–Ω",
    "–ê—Ä–≥–∏—à—Ç",
    "–ò–≥–æ—Ä—å –ë—É—à—Ç–∞–∫–æ–≤",
    "–°–∞—à–∞ –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ",
    "–°–ª–∞–≤–∏–∫ –ì—Ä–µ—á—É—Ö–∞",
    "–ê—Ä—Ç–µ–º –ó–∏–Ω—á–µ–Ω–∫–æ",
    "–í–∞–ª–∏–∫ –ü–æ–Ω–∞–º–∞—Ä–µ–≤",
    "–ñ–µ–∫–∞ –ê–±—Ä–æ—Å–∏–º–æ–≤",
    "–ê—Ä—Ç–µ–º –ë—É–ª–≥—É—Ä—Å–∫–∏–π",
    "–í–∏—Ç–∞–ª–∏–∫ –ì–µ—Ä–∞—Å–∏–º–æ–≤",
    "–°–µ—Ä–≥–µ–π –ö–µ—Å—è–Ω",
    "–ì–µ–æ—Ä–≥–∏–π –ö–æ–Ω–¥—Ä–∞—à–µ–≤",
    "–ú–∞–∫—Å–∏–º –û—Ç—Ä–∞—Ö–æ–≤",
    "–°–µ—Ä–≥–µ–π –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ",
    "–û–≥–∞–Ω–µ–∑–æ–≤ –†–µ–º",
    "–†–∞–º–∏–ª—å",
    "–Æ—Ä–∞",
    "–î–µ–Ω –ß–∞–π",
    "–†–æ–º–∞ –Ø–≤–Ω–∏–∫–æ–≤",
    "–ó–∞—Ö–∞—Ä",
    "–ì–∞–±–∏–ª–æ–≤–∞ –ê–ª–∏–Ω–∞",
    "–ê–Ω–¥—Ä–µ–π –ë–µ–π"
]

# –ü–∞–º'—è—Ç—å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å
orders = []

# –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—à–∏–Ω—É —Å—Ç–∞–Ω—ñ–≤
class OrderState(StatesGroup):
    waiting_for_regular = State()
    waiting_for_name = State()
    waiting_for_surname = State()
    waiting_for_table = State()
    waiting_for_hookahs = State()

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_order(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–¢–∞–∫", "–ù—ñ")
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –í–∏ –ø–æ—Å—Ç—ñ–π–Ω–∏–π –∫–ª—ñ—î–Ω—Ç?", reply_markup=keyboard)
    await OrderState.waiting_for_regular.set()

@dp.message_handler(state=OrderState.waiting_for_regular)
async def choose_regular(message: types.Message, state: FSMContext):
    if message.text.lower() == "—Ç–∞–∫":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for name in regular_customers:
            keyboard.add(name)
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è –∑—ñ —Å–ø–∏—Å–∫—É:", reply_markup=keyboard)
        await OrderState.waiting_for_name.set()
    elif message.text.lower() == "–Ω—ñ":
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
        await OrderState.waiting_for_name.set()
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å: –¢–∞–∫ –∞–±–æ –ù—ñ.")

@dp.message_handler(state=OrderState.waiting_for_name)
async def get_name(message: types.Message, state: FSMContext):
    name_surname = message.text.split()
    if len(name_surname) == 2:
        await state.update_data(name=name_surname[0], surname=name_surname[1])
        await ask_table(message)
    else:
        await state.update_data(name=message.text)
        await message.answer("–¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:")
        await OrderState.waiting_for_surname.set()

@dp.message_handler(state=OrderState.waiting_for_surname)
async def get_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await ask_table(message)

async def ask_table(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª—É (–≤—ñ–¥ 1 –¥–æ 45):", reply_markup=types.ReplyKeyboardRemove())
    await OrderState.waiting_for_table.set()

@dp.message_handler(state=OrderState.waiting_for_table)
async def get_table(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not (1 <= int(message.text) <= 45):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª—É –≤—ñ–¥ 1 –¥–æ 45.")
        return
    await state.update_data(table=int(message.text))
    await message.answer("–°–∫—ñ–ª—å–∫–∏ –∫–∞–ª—å—è–Ω—ñ–≤ –∑–∞–º–æ–≤–∏—Ç–∏?")
    await OrderState.waiting_for_hookahs.set()

@dp.message_handler(state=OrderState.waiting_for_hookahs)
async def get_hookahs(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 1:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–ª—å—è–Ω—ñ–≤ (–º—ñ–Ω—ñ–º—É–º 1).")
        return
    await state.update_data(hookahs=int(message.text))

    data = await state.get_data()
    name = data.get('name', '')
    surname = data.get('surname', '')
    table = data['table']
    hookahs = data['hookahs']

    order_info = {
        "name": name,
        "surname": surname,
        "table": table,
        "hookahs": hookahs
    }
    orders.append(order_info)

    await message.answer(
        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!\n\n"
        f"üë§ –Ü–º'—è: {name} {surname}\n"
        f"ü™ë –°—Ç—ñ–ª: {table}\n"
        f"üí® –ö–∞–ª—å—è–Ω–∏: {hookahs} —à—Ç."
    )
    await state.finish()

# –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–º–æ–≤–ª–µ–Ω—å
@dp.message_handler(commands=['orders'])
async def show_orders(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    if not orders:
        await message.answer("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return
    result = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å:*\n\n"
    for idx, order in enumerate(orders, start=1):
        result += (f"{idx}. üë§ {order['name']} {order['surname']}\n"
                   f"ü™ë –°—Ç—ñ–ª: {order['table']}\n"
                   f"üí® –ö–∞–ª—å—è–Ω–∏: {order['hookahs']} —à—Ç.\n\n")
    await message.answer(result, parse_mode="Markdown")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
