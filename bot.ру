import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiohttp import web
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 10000))

bot = Bot(token=TOKEN)
dp = Dispatcher()

TABLES = list(range(1, 46))

VIP_CLIENTS = [
    "Эдгар Хачатарян", "Эрнест Хачатарян", "Саша Лысенко", "Эмин Бабаев", "Шахин Бабаев",
    "Тахир", "Артур Арутюнян", "Тарен Егонян", "Игорь Бегучев", "Артур Маркосян",
    "Аргишт", "Игорь Буштаков", "Саша Бондаренко", "Славик Гречуха", "Артем Зинченко",
    "Валик Понамарев", "Жека Абросимов", "Артем Булгурский", "Виталик Герасимов",
    "Сергей Кесян", "Георгий Кондрашев", "Максим Отрахов", "Сергей Бондаренко",
    "Оганезов Рем", "Рамиль", "Юра", "Ден Чай", "Рома Явников", "Захар",
    "Габилова Алина", "Андрей Бей"
]

class Booking(StatesGroup):
    table = State()
    hookah_count = State()

@dp.message()
async def start(message: types.Message, state: FSMContext):
    await message.answer("Привет! Введите номер стола (1-45):")
    await state.set_state(Booking.table)

@dp.message(Booking.table)
async def ask_table(message: types.Message, state: FSMContext):
    try:
        table_number = int(message.text)
        if table_number not in TABLES:
            raise ValueError
        await state.update_data(table=table_number)
        await message.answer("Сколько кальянов нужно?")
        await state.set_state(Booking.hookah_count)
    except ValueError:
        await message.answer("Введите правильный номер стола от 1 до 45.")

@dp.message(Booking.hookah_count)
async def ask_hookahs(message: types.Message, state: FSMContext):
    try:
        hookah_count = int(message.text)
        data = await state.get_data()
        table = data['table']
        await message.answer(f"Ваш заказ принят: Стол №{table}, кальянов: {hookah_count}.")
        await state.clear()
    except ValueError:
        await message.answer("Введите количество кальянов числом.")

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()

app = web.Application()
app.router.add_post("/", dp.webhook_handler())
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, port=PORT)
