import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import web
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ú—ã –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ .env
PORT = int(os.getenv("PORT", 8000))

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°—Ç–æ–ª—ã
TABLES = list(range(1, 46))  # 1-45

# –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
VIP_CLIENTS = [
    "–≠–¥–≥–∞—Ä –•–∞—á–∞—Ç–∞—Ä—è–Ω", "–≠—Ä–Ω–µ—Å—Ç –•–∞—á–∞—Ç–∞—Ä—è–Ω", "–°–∞—à–∞ –õ—ã—Å–µ–Ω–∫–æ", "–≠–º–∏–Ω –ë–∞–±–∞–µ–≤", "–®–∞—Ö–∏–Ω –ë–∞–±–∞–µ–≤",
    "–¢–∞—Ö–∏—Ä", "–ê—Ä—Ç—É—Ä –ê—Ä—É—Ç—é–Ω—è–Ω", "–¢–∞—Ä–µ–Ω –ï–≥–æ–Ω—è–Ω", "–ò–≥–æ—Ä—å –ë–µ–≥—É—á–µ–≤", "–ê—Ä—Ç—É—Ä –ú–∞—Ä–∫–æ—Å—è–Ω",
    "–ê—Ä–≥–∏—à—Ç", "–ò–≥–æ—Ä—å –ë—É—à—Ç–∞–∫–æ–≤", "–°–∞—à–∞ –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ", "–°–ª–∞–≤–∏–∫ –ì—Ä–µ—á—É—Ö–∞", "–ê—Ä—Ç–µ–º –ó–∏–Ω—á–µ–Ω–∫–æ",
    "–í–∞–ª–∏–∫ –ü–æ–Ω–∞–º–∞—Ä–µ–≤", "–ñ–µ–∫–∞ –ê–±—Ä–æ—Å–∏–º–æ–≤", "–ê—Ä—Ç–µ–º –ë—É–ª–≥—É—Ä—Å–∫–∏–π", "–í–∏—Ç–∞–ª–∏–∫ –ì–µ—Ä–∞—Å–∏–º–æ–≤",
    "–°–µ—Ä–≥–µ–π –ö–µ—Å—è–Ω", "–ì–µ–æ—Ä–≥–∏–π –ö–æ–Ω–¥—Ä–∞—à–µ–≤", "–ú–∞–∫—Å–∏–º –û—Ç—Ä–∞—Ö–æ–≤", "–°–µ—Ä–≥–µ–π –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ",
    "–û–≥–∞–Ω–µ–∑–æ–≤ –†–µ–º", "–†–∞–º–∏–ª—å", "–Æ—Ä–∞", "–î–µ–Ω –ß–∞–π", "–†–æ–º–∞ –Ø–≤–Ω–∏–∫–æ–≤", "–ó–∞—Ö–∞—Ä",
    "–ì–∞–±–∏–ª–æ–≤–∞ –ê–ª–∏–Ω–∞", "–ê–Ω–¥—Ä–µ–π –ë–µ–π"
]

class Booking(StatesGroup):
    choosing_table = State()
    choosing_count = State()

@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞? (1-45)")
    await state.set_state(Booking.choosing_table)

@dp.message(Booking.choosing_table)
async def choose_table(message: Message, state: FSMContext):
    try:
        table_number = int(message.text)
        if table_number not in TABLES:
            raise ValueError
        await state.update_data(table=table_number)
        await message.answer(f"–°–∫–æ–ª—å–∫–æ –∫–∞–ª—å—è–Ω–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–ª—è —Å—Ç–æ–ª–∞ {table_number}?")
        await state.set_state(Booking.choosing_count)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞ –æ—Ç 1 –¥–æ 45.")

@dp.message(Booking.choosing_count)
async def choose_count(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        data = await state.get_data()
        table = data["table"]
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n–°—Ç–æ–ª ‚Ññ{table}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤: {count}")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
ADMINS = [123456789]  # <-- –í–≤–µ–¥–∏ —Å—é–¥–∞ —Å–≤–æ–π Telegram ID

@dp.message(F.text == "/admin")
async def admin_panel(message: Message):
    if message.from_user.id in ADMINS:
        vip_list = "\n".join(VIP_CLIENTS)
        await message.answer(f"üëë –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n{vip_list}")
    else:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dispatcher):
    await bot.delete_webhook()

app = web.Application()
dp.setup_web(app)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)
